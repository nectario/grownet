version: 0.4
language_conventions:
  java:    camelCase
  python:  snake_case
  mojo:    snake_case
  cpp:     camelCase # follow current Region.h style

types:
  Strength: float
  Step:     long
  SlotId:   int

classes:

  SlotConfig:
    enum Policy: [FIXED, NONUNIFORM, ADAPTIVE]
    fields:
      policy: Policy
      slotWidthPercent: float         # seed width for FIXED/ADAPTIVE
      nonuniformEdges: float[]        # ascending, for NONUNIFORM
      maxSlots: int                   # -1 = unbounded
    factories:
      fixed(widthPercent: float) -> SlotConfig
      nonuniform(edgesAsc: float[]) -> SlotConfig
      adaptive(seedWidthPercent: float, maxSlots: int) -> SlotConfig
      singleSlot() -> SlotConfig

  SlotEngine:
    methods:
      slotId(lastInput: float, input: float, currentSlotCount: int, cfg: SlotConfig) -> SlotId

  Weight:
    fields:
      stepValue: float
      strengthValue: Strength
      reinforcementCount: int
      thresholdValue: float
      emaRate: float
      firstSeen: bool
    methods:
      reinforce(modulationFactor: float) -> void
      updateThreshold(inputValue: float) -> bool  # returns fired
      getStrengthValue() -> Strength
      getThresholdValue() -> float
      getEmaRate() -> float

  LateralBus:
    fields:
      inhibitionFactor: float
      modulationFactor: float
      currentStep: Step
    methods:
      setInhibitionFactor(f: float) -> void
      setModulationFactor(f: float) -> void
      decay() -> void
      getCurrentStep() -> Step

  RegionBus:
    # same shape as LateralBus
    alias_of: LateralBus

  Synapse:
    fields:
      target: Neuron
      weight: Weight
      isFeedback: bool
      lastStep: Step

  FireHook:
    signature: (amplitude: float, who: Neuron) -> void

  Neuron:
    ctor:
      - (id: string, bus: LateralBus, slotConfig: SlotConfig, slotLimit: int)
    fields:
      slots: Map<SlotId, Weight>
      outgoing: Synapse[]
      slotLimit: int
      lastInputValue: float
    methods:
      connect(target: Neuron, feedback: bool=false) -> Synapse
      onInput(value: float) -> bool
      onOutput(amplitude: float) -> void
      fire(inputValue: float) -> void          # protected/override
      pruneSynapses(currentStep: Step, staleWindow: Step, minStrength: float) -> int
      registerFireHook(hook: FireHook) -> void
      neuronValue(mode: string="readiness") -> float
    accessors:
      id() -> string
      getSlots() -> Map<SlotId, Weight>
      getOutgoing() -> Synapse[]
      getBus() -> LateralBus
      getLastInputValue() -> float

  InputNeuron:
    base: Neuron
    fields:
      gain: float
      epsilonFire: float
      outputValue: float
    methods:
      onInput(value: float) -> bool        # amplifies by gain, floors by epsilonFire
      onOutput(amplitude: float) -> void   # records outputValue
      getOutputValue() -> float
      endTick() -> void                    # usually no-op

  OutputNeuron:
    base: Neuron
    fields:
      smoothing: float
      outputValue: float
    methods:
      onInput(value: float) -> bool        # treat as single-slot sink
      onOutput(amplitude: float) -> void   # records outputValue
      endTick() -> void                    # apply EMA smoothing to outputValue
      getOutputValue() -> float

  Layer:
    fields:
      neurons: Neuron[]
      bus: LateralBus
    ctor:
      - (excitatoryCount: int, inhibitoryCount: int, modulatoryCount: int)
    methods:
      wireRandomFeedforward(probability: float) -> void
      wireRandomFeedback(probability: float) -> void
      forward(value: float) -> void
      propagateFrom(sourceIndex: int, value: float) -> void
      endTick() -> void
    accessors:
      getNeurons() -> Neuron[]
      getBus() -> LateralBus

  InputLayer2D:
    base: Layer
    fields:
      height: int
      width: int
    ctor:
      - (height: int, width: int, gain: float=1.0, epsilonFire: float=0.01)
    methods:
      index(y: int, x: int) -> int
      forwardImage(image: float[height][width]) -> void
      getFrame() -> float[height][width]
      propagateFrom(sourceIndex: int, value: float) -> void  # no-op

  OutputLayer2D:
    base: Layer
    fields:
      height: int
      width: int
      frame: float[height][width]
    ctor:
      - (height: int, width: int, smoothing: float=0.2)
    methods:
      index(y: int, x: int) -> int
      propagateFrom(sourceIndex: int, value: float) -> void  # routes by index
      endTick() -> void                                      # fill frame from neurons
      getFrame() -> float[height][width]

  Tract:
    fields:
      source: Layer
      destination: Layer
      bus: RegionBus
      feedback: bool
    ctor:
      - (source: Layer, destination: Layer, bus: RegionBus, feedback: bool=false)
    methods:
      wireDenseRandom(probability: float) -> int         # returns edges created
      flush() -> int                                     # delivered events
      pruneEdges(staleWindow: Step, minStrength: float) -> int

  Region:
    fields:
      name: string
      layers: Layer[]
      tracts: Tract[]
      bus: RegionBus
      inputPorts: Map<string, int[]>
      outputPorts: Map<string, int[]>
    ctor:
      - (name: string)
    methods:
      addLayer(excitatoryCount: int, inhibitoryCount: int, modulatoryCount: int) -> int
      addInputLayer2D(height: int, width: int, gain: float=1.0, epsilonFire: float=0.01) -> int
      addOutputLayer2D(height: int, width: int, smoothing: float=0.2) -> int
      connectLayers(sourceIndex: int, destIndex: int, probability: float, feedback: bool=false) -> Tract
      bindInput(port: string, layerIndices: int[]) -> void
      bindOutput(port: string, layerIndices: int[]) -> void
      tick(port: string, value: float) -> Metrics
      tickImage(port: string, frame: float[...][...]) -> Metrics
      prune(synapseStaleWindow: Step=10000, synapseMinStrength: float=0.05) -> PruneSummary
      pulseInhibition(factor: float) -> void   # optional, keep in C++ & expose in others
      pulseModulation(factor: float) -> void
    accessors:
      getName() -> string
      getLayers() -> Layer[]
      getBus() -> RegionBus

  Metrics:
    fields:
      deliveredEvents: int
      totalSlots: int
      totalSynapses: int

  PruneSummary:
    fields:
      prunedSynapses: int
      prunedEdges: int
