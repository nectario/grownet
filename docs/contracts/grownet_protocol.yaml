grownet:
  version: 0.3.0
  naming:
    fields: camelCase   # Python may expose snake_case aliases
    methods: lowerCamel
    events: lowerCamel
  enums:
    SlotPolicy: [FIXED, NONUNIFORM, ADAPTIVE]
  types:
    Weight:
      fields:
        strength: double          # [-1, +1], clamped smoothly
        hitCount: int             # saturates (e.g., 10_000)
        theta: double             # adaptive threshold
        emaRate: double           # recent spike rate (EMA)
        seenFirst: boolean        # T0 imprint executed?
      methods:
        reinforce(modulationFactor: double): void
        updateThreshold(inputValue: double): boolean  # returns "fired"
    LateralBus:
      fields:
        inhibitionFactor: double  # decays to 0 each tick
        modulationFactor: double  # resets toward 1.0 each tick
      methods:
        setInhibitionFactor(f: double): void
        setModulationFactor(f: double): void
        decay(): void
    Synapse:
      fields:
        targetId: string
        feedback: boolean
        weight: Weight
        lastUsedTick: long
      methods:
        deliver(amplitude: double): void
    SlotConfig:
      fields:
        policy: SlotPolicy
        fixedPercentDelta: double   # for FIXED policy (default 10.0)
    SlotEngine:
      methods:
        slotId(lastInput: double, currentInput: double, knownSlots: int): int
        computeBinForPercentDelta(deltaPercent: double, existing: map<int,Weight>): int
        selectOrCreateSlot(neuronId: string, slots: map<int,Weight>, inputValue: double): (slotId:int, weight:Weight)
    Neuron:
      fields:
        id: string
        haveLastInput: boolean
        lastInputValue: double
        slots: map<int, Weight>
        outgoing: list<Synapse>
      methods:
        onInput(value: double): boolean
        onOutput(amplitude: double): void
        fire(inputValue: double): void
        connect(target: Neuron, feedback: boolean = false): Synapse
        endTick(): void
        pruneSynapses(staleWindow: long, minStrength: double): int
        getLastInputValue(): double
        registerFireHook(callback: function(Neuron,double)): void
    ExcitatoryNeuron:
      base: Neuron
    InhibitoryNeuron:
      base: Neuron
    ModulatoryNeuron:
      base: Neuron
    Layer:
      fields:
        bus: LateralBus
        neurons: list<Neuron>
      ctor:
        (excitatoryCount:int, inhibitoryCount:int, modulatoryCount:int)
      methods:
        wireRandomFeedforward(probability: double): void
        wireRandomFeedback(probability: double): void
        forward(value: double): void
        endTick(): void
        propagateFrom(sourceIndex: int, amplitude: double): void  # default: no-op
    InputLayer2D:
      base: Layer
      ctor: (height:int, width:int, gain:double, epsilonFire:double)
      methods:
        forwardImage(frame: double[height][width]): void
        propagateFrom(sourceIndex: int, amplitude: double): void  # default: no-op
    OutputLayer2D:
      base: Layer
      ctor: (height:int, width:int, smoothing:double)
      methods:
        propagateFrom(sourceIndex: int, amplitude: double): void
        endTick(): void
        getFrame(): double[height][width]
    RegionMetrics:
      fields:
        deliveredEvents: int
        totalSlots: int
        totalSynapses: int
    PruneSummary:
      fields:
        prunedSynapses: int
        prunedEdges: int
    RegionBus: {}
    Tract:
      fields:
        source: Layer
        dest: Layer
        feedback: boolean
      methods:
        onSourceFired(sourceNeuronIndex: int, amplitude: double): void
    Region:
      ctor: (name:string)
      methods:
        addLayer(excitatoryCount:int, inhibitoryCount:int, modulatoryCount:int): int
        addInputLayer2D(height:int, width:int, gain:double, epsilonFire:double): int
        addOutputLayer2D(height:int, width:int, smoothing:double): int
        connectLayers(sourceIndex:int, destIndex:int, probability:double, feedback:boolean=false): Tract
        bindInput(port:string, layerIndices:list<int>): void
        bindOutput(port:string, layerIndices:list<int>): void
        pulseInhibition(factor: double): void
        pulseModulation(factor: double): void
        tick(port:string, value:double): RegionMetrics
        tickImage(port:string, frame:double[H][W]): RegionMetrics
        prune(synapseStaleWindow:long, synapseMinStrength:double, tractStaleWindow:long, tractMinStrength:double): PruneSummary
        getName(): string
        getLayers(): list<Layer>
        getTracts(): list<Tract>
        getBus(): RegionBus
