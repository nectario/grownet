--- a/src/cpp/demo/DemoWindowedParity.cpp
+++ b/src/cpp/demo/DemoWindowedParity.cpp
@@ -11,7 +11,7 @@
         const int inIndex  = region.addInputLayer2D(16, 16, 1.0, 0.01);
         const int outIndex = region.addOutputLayer2D(16, 16, 0.0);
 
-        struct Combo { int kh, kw, sh, sw; const char* padding; const char* label; };
+        struct Combo { int kernelHeight, kernelWidth, strideHeight, strideWidth; const char* padding; const char* label; };
         std::vector<Combo> combos = {
             {3, 3, 1, 1, "same",  "k3s1-same"},
             {5, 5, 1, 1, "same",  "k5s1-same"},
@@ -19,11 +19,11 @@
         };
 
         for (const auto& c : combos) {
-            int uniqueSources = region.connectLayersWindowed(inIndex, outIndex, c.kh, c.kw, c.sh, c.sw, c.padding, false);
+            int uniqueSources = region.connectLayersWindowed(inIndex, outIndex, c.kernelHeight, c.kernelWidth, c.strideHeight, c.strideWidth, c.padding, false);
             std::cout << c.label
                       << " -> uniqueSources=" << uniqueSources
-                      << " (kernel=" << c.kh << "x" << c.kw
-                      << ", stride=" << c.sh << "x" << c.sw
+                      << " (kernel=" << c.kernelHeight << "x" << c.kernelWidth
+                      << ", stride=" << c.strideHeight << "x" << c.strideWidth
                       << ", padding=" << c.padding << ")\n";
         }
         return 0;
--- a/src/cpp/demo/DemoWindowedUniqueSources.cpp
+++ b/src/cpp/demo/DemoWindowedUniqueSources.cpp
@@ -22,7 +22,7 @@
         const int inputIndex  = region.addInputLayer2D(16, 16, 1.0, 0.01);
         const int outputIndex = region.addOutputLayer2D(16, 16, 0.0);
 
-        struct Combo { int kh, kw, sh, sw; const char* padding; const char* label; };
+        struct Combo { int kernelHeight, kernelWidth, strideHeight, strideWidth; const char* padding; const char* label; };
         std::vector<Combo> combos = {
             {3, 3, 1, 1, "same",  "k3s1-same"},
             {5, 5, 1, 1, "same",  "k5s1-same"},
@@ -31,11 +31,11 @@
 
         for (const auto& combo : combos) {
             int uniqueSources = connectAndCount(region, inputIndex, outputIndex,
-                                               combo.kh, combo.kw, combo.sh, combo.sw, combo.padding);
+                                               combo.kernelHeight, combo.kernelWidth, combo.strideHeight, combo.strideWidth, combo.padding);
             std::cout << combo.label
                       << " -> uniqueSources=" << uniqueSources
-                      << " (kernel=" << combo.kh << "x" << combo.kw
-                      << ", stride=" << combo.sh << "x" << combo.sw
+                      << " (kernel=" << combo.kernelHeight << "x" << combo.kernelWidth
+                      << ", stride=" << combo.strideHeight << "x" << combo.strideWidth
                       << ", padding=" << combo.padding << ")\n";
         }
         return 0;
--- a/src/cpp/src/TractWindowed.cpp
+++ b/src/cpp/src/TractWindowed.cpp
@@ -3,12 +3,12 @@
 
 namespace grownet {
 
-TractWindowed::TractWindowed(int s, int d, int kh, int kw, int sh, int sw,
+TractWindowed::TractWindowed(int s, int d, int kernelHeight, int kernelWidth, int strideHeight, int strideWidth,
                              bool same, bool destIs2D, int dh, int dw)
   : sourceLayerIndex(s),
     destLayerIndex(d),
-    kernelH(kh), kernelW(kw),
-    strideH(sh), strideW(sw),
+    kernelH(kernelHeight), kernelW(kernelWidth),
+    strideH(strideHeight), strideW(strideWidth),
     samePadding(same),
     destIsOutput2D(destIs2D),
     destH(dh), destW(dw) {}
